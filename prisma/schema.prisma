generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  SUPERADMIN
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  role          Role      @default(USER)
  banned        Boolean?  @default(false)         // ✅ new
  banReason     String?                          // ✅ new
  banExpires    DateTime?                        // ✅ new
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]

  loginStatus   Boolean?  @default(true)
  country       String?
  timezone      String?   @default("UTC")
  goals         Goal[]  

  @@map("user")
}

model Session {
  id              String   @id @default(uuid())
  expiresAt       DateTime
  token           String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  ipAddress       String?
  userAgent       String?
  userId          String
  impersonatedBy  String?                      // ✅ new
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model Goal {
  id          String   @id @default(cuid())
  title       String
  category    String?
  description String?
  targetDate  DateTime?
  isCompleted Boolean   @default(false)
  priority    Int?      // Example: 1 = High, 2 = Medium, 3 = Low
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}
