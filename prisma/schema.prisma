
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  SUPERADMIN
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  role          Role      @default(USER)
  banned        Boolean?  @default(false) // ✅ new
  banReason     String? // ✅ new
  banExpires    DateTime? // ✅ new
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]

  loginStatus Boolean? @default(true)
  country     String?
  timezone    String?  @default("UTC")
  goals       Goal[]
  media       Media[] // ✅ Added reverse relation

  stripeCustomerId String?
  orders        Order[] 
  habits      Habit[] 

  @@map("user")
}

model Session {
  id             String   @id @default(uuid())
  expiresAt      DateTime
  token          String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String? // ✅ new
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model Subscription {
  id                   String   @id @default(cuid())
  plan                 String
  referenceId          String
  stripeCustomerId     String?
  stripeSubscriptionId String?
  status               String
  periodStart          DateTime?
  periodEnd            DateTime?
  cancelAtPeriodEnd    Boolean?
  seats                Int?
  trialStart           DateTime?
  trialEnd             DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Order {
  id                    String   @id @default(cuid())
  userId                String
  stripeInvoiceId       String?
  stripeSubscriptionId  String?
  stripeCustomerId      String?
  amount                Float
  currency              String   @default("usd")
  status                String
  hostedInvoiceUrl      String?
  invoicePdfUrl         String?
  customerEmail         String?
  customerName          String?
  createdAt             DateTime @default(now())

  user                  User     @relation(fields: [userId], references: [id])
}



model Goal {
  id          String    @id @default(cuid())
  title       String
  category    String?
  description String?
  targetDate  DateTime?
  isCompleted Boolean   @default(false)
  priority    Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  featuredImageId String?
  featuredImage   Media?  @relation("GoalFeaturedImage", fields: [featuredImageId], references: [id], onDelete: SetNull)

  @@map("goals")
}

model Media {
  id         String   @id @default(cuid())
  url        String
  fileName   String
  fileType   String
  fileSize   Int
  mimeType   String
  extension  String?
  uploadedAt DateTime @default(now())
  uploadedBy String?
  user       User?    @relation(fields: [uploadedBy], references: [id])
  goals      Goal[]   @relation("GoalFeaturedImage") // reverse relation
}




model Habit {
  id          String   @id @default(cuid())
  title       String
  description String?
  frequency   String   // "daily", "weekly"
  startDate   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  completions HabitCompletion[]
  createdAt   DateTime @default(now())
}


model HabitCompletion {
  id          String   @id @default(cuid())
  habitId     String
  date        DateTime
  status      CompletionStatus @default(pending)
  createdAt   DateTime @default(now())

  habit       Habit    @relation(fields: [habitId], references: [id])

  @@unique([habitId, date], name: "habitId_date") 
}

enum CompletionStatus {
  completed
  skipped
  pending
}
